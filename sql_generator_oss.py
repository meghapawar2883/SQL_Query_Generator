# -*- coding: utf-8 -*-
"""SQL_Generator_OSS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QImobAKJjZ0z25j0XRqFmiKVGIHRbDml
"""

#SQLCoder-7b-2

!pip install torch transformers bitsandbytes accelerate sqlparse

import torch
import psutil
import sqlparse
from transformers import AutoTokenizer, AutoModelForCausalLM

torch.cuda.is_available()
#

available_memory = torch.cuda.get_device_properties(0).total_memory

print(available_memory)

#Download Model

model_name = "defog/SQLCoder-7b-2"
tokenizer = AutoTokenizer.from_pretrained(model_name)
if available_memory > 16e9:
  model = AutoModelForCausalLM.from_pretrained(model_name, trust_remote_code=True, torch_dtype=torch.float16, device_map="auto",use_cache=True,)
else:
    model = AutoModelForCausalLM.from_pretrained(model_name, trust_remote_code=True, load_in_8bit=True,device_map="auto",use_cache=True,)

prompt = """###Task
Generate a SQL query to answer [QUESTION] {question}[/QUESTION]

### Instructions
-If you cannot answer the question based on the available database schema, return "I don't know"
-Remember that revenue is price multiplied by quantity.

### Database Schema
This query will run on a database whose schema is represented in this string:
CREATE TABLE products(product_id INTEGER PRIMARY KEY, name VARCHAR(50), price DECIMAL (10,2),quantity INTEGER;
CREATE TABLE customers(customer_id INTEGER PRIMARY KEY, name VARCHAR(50), address VARCHAR(100));
CREATE TABLE salespeople(salesperson_id INTEGER PRIMARY KEY, name VARCHAR(50), region VARCHAR(100));
CREATE TABLE sales(sale_id INTEGER PRIMARY KEY, product_id INTEGER, customer_id INTEGER, salesperson_id INTEGER,sale_date DATE, quantity INTEGER);
CREATE TABLE product_suppliers(supplier_id INTEGER PRIMARY KEY,product_id INTEGER,supply_price DECIMAL(10,2));

-- sales.product_id can be joined with products.product_id
-- sales.customer_id can be joined with customers.customer_id
-- sales.salesperson_id can be joined with salespeople.salesperson_id
-- product_suppliers.product_id can be joined with products.product_id

###Answer
Given the database schema,here is the SQL query to answer the [QUESTION] {question}[/QUESTION]
[SQL]
"""
#

def generate_query(question):
  updated_prompt = prompt.format(question=question)
  inputs = tokenizer(updated_prompt, return_tensors="pt").input_ids.to("cuda")
  generated_ids = model.generate(
      input_ids=inputs,
      num_return_sequences=1,
      eos_token_id=tokenizer.eos_token_id,
      pad_token_id=tokenizer.eos_token_id,
      max_new_tokens=400,
      do_sample=False,
      num_beams=1,
  )

  outputs = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)

  torch.cuda.empty_cache()
  torch.cuda.synchronize()

  return sqlparse.format(outputs[0].split("[SQL]")[-1], reindent=True)

question = "What was the highest quatity sold last month?"
generated_sql = generate_query(question)
print(generated_sql)
#

